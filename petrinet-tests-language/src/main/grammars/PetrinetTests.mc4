grammar PetrinetTests extends de.monticore.literals.MCCommonLiterals  {


    // SyntaxSugar expecting list but have single element => single-element-list
    // TestcaseBody in PetriNetTest / transition-name in Simulation
    // ???


    //if test contains only testcasebody -> implicit testcase with Testcase.Name = Test.Name
    symbol scope PetriNetTest = "pntest" Name "{"
        Import
        (TestcaseBody | Testcase+)
    "}";

    symbol Testcase = "testcase" Name "{"
        TestcaseBody
    "}";

    Import = "use" "petrinet" Name;

    TestcaseBody = InitialMarking Expectation* TestStep*;
    TestStep = Simulation+ Expectation+;
    Simulation = "simulate" "{" (Name || ",")+ "}";

    InitialMarking = "initial" "marking" (InheritMarking | DefineMarking);
    InheritMarking = "inherited" RestSpecification?;
    DefineMarking = "{" (PlaceBinding || ",")* ("," RestSpecification)? "}";
    PlaceBinding = place:Name value:MarkingValue;
    RestSpecification = "rest" MarkingValue;
    MarkingValue = NatLiteral;

    Expectation = "expect" Condition;
    interface Condition;
    BooleanCondition implements Condition = Negation | Conjunction | Disjunction;
    Negation = "not" Condition;
    Conjunction = "all" "{" (Condition || ",")* "}";
    Disjunction = "any" "{" (Condition || ",")* "}";

    MarkingCondition implements Condition = "marking" "{" (PlaceBinding || ",")* "}";
}