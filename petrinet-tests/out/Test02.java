// generated by template templates/PetrinetTest.ftl
package petrinettests.simulator; //TODO: package?

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import petrinet._ast.ASTPetrinet;
import petrinet._parser.PetrinetParser;
import petrinet.analysis.Marking;
import petrinet.analysis.TokenCount;

import java.io.IOException;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;

public class Test02 {
    ASTPetrinet petrinet;
    Simulator sim;

    @BeforeEach
    public void prepareSimulator() throws IOException {
        PetrinetParser parser = new PetrinetParser();
        petrinet = parser.parse("src/test/resources/CookieMachine_modified.pn").orElseGet(() -> {
            fail("Model path not found");
            return null;
        });

        sim = new Simulator(petrinet);
    }

    @Test
    public void testATestCase() throws IOException {
        clearAllTokens();
        setTokens("Keksspeicher", 4);
        setTokens("Einwurfschlitz", 0);
        applyRest(10);  

        // Expecting something.... TODO

        performTransition("MuenzeEinwerfen");
        performTransition("MuenzeAkzeptieren");
        performTransition("KeksDruecken");
        performTransition("KekseAusgeben");
        performTransition("KeksGeben");
        performTransition("SchachtelEntnehmen");
        // Expecting something.... TODO
    }

    // HELPERS

    private void performTransition(String transitionName) {
        assertDoesNotThrow(() -> sim.simulateTransition(transitionName));
    }

    private void assertMarking(String placeName, int tokenCount) {
        assertEquals(0, sim.getCurrentMarking().get(placeName).compareTo(tokenCount));
    }

    private void setTokens(String placeName, int tokenCount) {
        Marking initialMarking = sim.getCurrentMarking();
        TokenCount count = new TokenCount(tokenCount);
        initialMarking.set(placeName, count);
        sim.setCurrentMarking(initialMarking);
    }

    private void clearAllTokens() {
        applyRest(0);
    }

    private void applyRest(int tokenCount) {
        Marking initialMarking = sim.getCurrentMarking();
        for (String key : initialMarking.keys()) {
            TokenCount count = initialMarking.get(key);
            if (count.compareTo(0) > 0) {
                continue;
            }

            count.add(tokenCount);
            initialMarking.set(key, count);
        }
        sim.setCurrentMarking(initialMarking);
    }
}
